/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LatestReleasesService } from "../latestReleases.service";
import { LatestReleasesCreateInput } from "./LatestReleasesCreateInput";
import { LatestReleases } from "./LatestReleases";
import { LatestReleasesFindManyArgs } from "./LatestReleasesFindManyArgs";
import { LatestReleasesWhereUniqueInput } from "./LatestReleasesWhereUniqueInput";
import { LatestReleasesUpdateInput } from "./LatestReleasesUpdateInput";

export class LatestReleasesControllerBase {
  constructor(protected readonly service: LatestReleasesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LatestReleases })
  async createLatestReleases(
    @common.Body() data: LatestReleasesCreateInput
  ): Promise<LatestReleases> {
    return await this.service.createLatestReleases({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LatestReleases] })
  @ApiNestedQuery(LatestReleasesFindManyArgs)
  async latestReleasesItems(
    @common.Req() request: Request
  ): Promise<LatestReleases[]> {
    const args = plainToClass(LatestReleasesFindManyArgs, request.query);
    return this.service.latestReleasesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LatestReleases })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async latestReleases(
    @common.Param() params: LatestReleasesWhereUniqueInput
  ): Promise<LatestReleases | null> {
    const result = await this.service.latestReleases({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LatestReleases })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLatestReleases(
    @common.Param() params: LatestReleasesWhereUniqueInput,
    @common.Body() data: LatestReleasesUpdateInput
  ): Promise<LatestReleases | null> {
    try {
      return await this.service.updateLatestReleases({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LatestReleases })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLatestReleases(
    @common.Param() params: LatestReleasesWhereUniqueInput
  ): Promise<LatestReleases | null> {
    try {
      return await this.service.deleteLatestReleases({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
