/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LatestReleases as PrismaLatestReleases } from "@prisma/client";

export class LatestReleasesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LatestReleasesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.latestReleases.count(args);
  }

  async latestReleasesItems(
    args: Prisma.LatestReleasesFindManyArgs
  ): Promise<PrismaLatestReleases[]> {
    return this.prisma.latestReleases.findMany(args);
  }
  async latestReleases(
    args: Prisma.LatestReleasesFindUniqueArgs
  ): Promise<PrismaLatestReleases | null> {
    return this.prisma.latestReleases.findUnique(args);
  }
  async createLatestReleases(
    args: Prisma.LatestReleasesCreateArgs
  ): Promise<PrismaLatestReleases> {
    return this.prisma.latestReleases.create(args);
  }
  async updateLatestReleases(
    args: Prisma.LatestReleasesUpdateArgs
  ): Promise<PrismaLatestReleases> {
    return this.prisma.latestReleases.update(args);
  }
  async deleteLatestReleases(
    args: Prisma.LatestReleasesDeleteArgs
  ): Promise<PrismaLatestReleases> {
    return this.prisma.latestReleases.delete(args);
  }
}
